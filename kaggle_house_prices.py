# -*- coding: utf-8 -*-
"""Kaggle|House Prices

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mFfgWcbGNmx-oO2XHKfNvrpr3da-l-7H
"""

#import the required libraries
import pandas as pd
import numpy as np #For reading the data
import matplotlib.pyplot as plt #For Visualizing the data
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

import io
from google.colab import files
uploaded = files.upload()

train_df = pd.read_csv(io.BytesIO(uploaded['train.csv']))

train_df.head()

train_df['MSZoning'].value_counts()

sns.countplot(train_df['MSZoning'])

#To see the null values and delete the undesired ones (like ~3 features out of ~81)
train_df.isnull().sum()

#Visualizing the missing values
sns.heatmap(train_df.isnull(),yticklabels=False,cbar=False,linecolor='blue',center=None,xticklabels='auto')

train_df.shape

train_df.info

#This feature is a very high predictive so we will get the mean for it to fill in the empty cells
train_df['LotFrontage'] = train_df ['LotFrontage'].fillna(train_df['LotFrontage'].mean())

train_df.drop(['Alley'],axis=1,inplace=True)

train_df['BsmtCond'] = train_df ['BsmtCond'].fillna(train_df['BsmtCond'].mode()[0])
train_df['BsmtQual'] = train_df ['BsmtQual'].fillna(train_df['BsmtQual'].mode()[0])
train_df['FireplaceQu'] = train_df ['FireplaceQu'].fillna(train_df['FireplaceQu'].mode()[0])
train_df['RoofStyle'] = train_df ['RoofStyle'].fillna(train_df['RoofStyle'].mode()[0])
train_df['GarageType'] = train_df ['GarageType'].fillna(train_df['GarageType'].mode()[0])

train_df.drop(['GarageYrBlt'],axis=1,inplace=True)

train_df['GarageFinish'] = train_df ['GarageFinish'].fillna(train_df['GarageFinish'].mode()[0])
train_df['GarageQual'] = train_df ['GarageQual'].fillna(train_df['GarageQual'].mode()[0])
train_df['GarageCond'] = train_df ['GarageCond'].fillna(train_df['GarageCond'].mode()[0])
train_df['GarageCars'] = train_df ['GarageCars'].fillna(train_df['GarageCars'].mode()[0])

train_df.drop(['Fence'],axis=1,inplace=True)

train_df.drop(['PoolQC'],axis=1,inplace=True)

train_df.drop(['MiscFeature'],axis=1,inplace=True)

train_df.drop(['Id'],axis=1,inplace=True)

train_df.shape  #5 columns were deleted

train_df.isnull().sum()

train_df['MasVnrArea'] = train_df ['MasVnrArea'].fillna(train_df['MasVnrArea'].mode()[0])

#Visualizing our null values using cmap and sns
sns.heatmap(train_df.isnull(),yticklabels=False,cbar=False,cmap='rainbow')

train_df['BsmtExposure'] = train_df ['BsmtExposure'].fillna(train_df['BsmtExposure'].mode()[0])
train_df['Exterior1st'] = train_df ['Exterior1st'].fillna(train_df['Exterior1st'].mode()[0])
train_df['BsmtFinType2'] = train_df ['BsmtFinType2'].fillna(train_df['BsmtFinType2'].mode()[0])

sns.heatmap(train_df.isnull(),yticklabels=False,cbar=False,cmap='flag')

train_df.dropna(inplace=True)

train_df.head()

train_df.shape

Features =['MSZoning','Street','LotShape','LandContour','Utilities','LotConfig','LandSlope','Neighborhood','Condition2','BldgType','Condition1','HouseStyle','SaleType','SaleCondition','ExterCond',
         'ExterQual','Foundation','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2',
        'RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','Heating','HeatingQC',
         'CentralAir',
         'Electrical','KitchenQual','Functional',
         'FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond','PavedDrive']

#Number of cat. in features
len(Features)

#Dummy to convert cat. values to indicator values 
#into one new cat. column that has values 1 0
def category_onehot_multcols(multcolumns):
    df_final=final_df
    i=0
    for fields in multcolumns:
        
        print(fields)
        df1=pd.get_dummies(final_df[fields],drop_first=True)
        
        final_df.drop([fields],axis=1,inplace=True)
        if i==0:
            df_final=df1.copy()
        else:
            
            df_final=pd.concat([df_final,df1],axis=1)
        i=i+1
       
        
    df_final=pd.concat([final_df,df_final],axis=1)
        
    return df_final

main_df=train_df.copy()

import io
from google.colab import files
uploaded = files.upload()

test_df = pd.read_csv(io.BytesIO(uploaded['test.csv']))

test_df.shape

#'Saleprice' is not here
test_df.head()

#Checking the null values (MsZoning has 4 null values)
test_df.isnull().sum()

#Filling the missing values
test_df['LotFrontage']=test_df['LotFrontage'].fillna(test_df['LotFrontage'].mean())

#To check the null values with the max. rows and columns. 
import sys
np.set_printoptions(threshold=sys.maxsize)
pd.set_option('display.max_rows', None)
pd.pandas.set_option('display.max_columns',None)

#It is a catagorial feature 5 catagories
test_df['MSZoning']=test_df['MSZoning'].fillna(test_df['MSZoning'].mode()[0])

test_df.shape

test_df.drop(['Alley'],axis=1,inplace=True)

test_df.shape

test_df['BsmtCond']=test_df['BsmtCond'].fillna(test_df['BsmtCond'].mode()[0])
test_df['BsmtQual']=test_df['BsmtQual'].fillna(test_df['BsmtQual'].mode()[0])

test_df['FireplaceQu']=test_df['FireplaceQu'].fillna(test_df['FireplaceQu'].mode()[0])
test_df['GarageType']=test_df['GarageType'].fillna(test_df['GarageType'].mode()[0])

test_df.drop(['GarageYrBlt'],axis=1,inplace=True)

test_df.shape

test_df['GarageFinish']=test_df['GarageFinish'].fillna(test_df['GarageFinish'].mode()[0])
test_df['GarageQual']=test_df['GarageQual'].fillna(test_df['GarageQual'].mode()[0])
test_df['GarageCond']=test_df['GarageCond'].fillna(test_df['GarageCond'].mode()[0])
test_df.drop(['PoolQC','Fence','MiscFeature'],axis=1,inplace=True)

test_df.shape

test_df['MasVnrType']=test_df['MasVnrType'].fillna(test_df['MasVnrType'].mode()[0])
test_df['MasVnrArea']=test_df['MasVnrArea'].fillna(test_df['MasVnrArea'].mode()[0])

sns.heatmap(test_df.isnull(),yticklabels=False,cbar=False,cmap='viridis')

test_df['BsmtExposure']=test_df['BsmtExposure'].fillna(test_df['BsmtExposure'].mode()[0])

sns.heatmap(test_df.isnull(),yticklabels=False,cbar=False,cmap='viridis')

test_df['BsmtFinType2']=test_df['BsmtFinType2'].fillna(test_df['BsmtFinType2'].mode()[0])

test_df.loc [:,test_df.isnull().any()].head()

test_df['Utilities']=test_df['Utilities'].fillna(test_df['Utilities'].mode()[0])
test_df['Exterior1st']=test_df['Exterior1st'].fillna(test_df['Exterior1st'].mode()[0])
test_df['Exterior2nd']=test_df['Exterior2nd'].fillna(test_df['Exterior2nd'].mode()[0])
test_df['BsmtFullBath']=test_df['BsmtFullBath'].fillna(test_df['BsmtFullBath'].mode()[0])
test_df['BsmtHalfBath']=test_df['BsmtHalfBath'].fillna(test_df['BsmtHalfBath'].mode()[0])
test_df['GarageCars']=test_df['GarageCars'].fillna(test_df['GarageCars'].mode()[0])
test_df['GarageArea']=test_df['GarageArea'].fillna(test_df['GarageArea'].mode()[0])
test_df['KitchenQual']=test_df['KitchenQual'].fillna(test_df['KitchenQual'].mode()[0])
test_df['Functional']=test_df['Functional'].fillna(test_df['Functional'].mode()[0])
test_df['BsmtFinType1']=test_df['BsmtFinType1'].fillna(test_df['BsmtFinType1'].mode()[0])
test_df['BsmtFinSF1']=test_df['BsmtFinSF1'].fillna(test_df['BsmtFinSF1'].mode()[0])
test_df['BsmtFinSF2']=test_df['BsmtFinSF2'].fillna(test_df['BsmtFinSF2'].mode()[0])
test_df['BsmtUnfSF']=test_df['BsmtUnfSF'].fillna(test_df['BsmtUnfSF'].mode()[0])
test_df['TotalBsmtSF']=test_df['TotalBsmtSF'].fillna(test_df['TotalBsmtSF'].mode()[0])
test_df['SaleType']=test_df['SaleType'].fillna(test_df['SaleType'].mode()[0])

test_df.shape

#Converting to CSV file to be able to combine it with the training dataset.
test_df.to_csv('formulatedtest.csv',index=False)

test_df.shape

test_df.head()

test_df=pd.read_csv('formulatedtest.csv')

test_df.shape

test_df.head()

final_df= pd.concat([train_df,test_df],axis=0)

sns.heatmap(final_df.isnull(),yticklabels=False,cbar=False,cmap='viridis')

final_df['SalePrice'] = final_df ['SalePrice'].fillna(final_df['SalePrice'].mean())

final_df.drop('Id', inplace=True, axis=1)

#final_df.drop('FV', inplace=True, axis=1)

#final_df.drop("RH",  inplace=True, axis=1)

#final_df.drop("RL",  inplace=True, axis=1)

#final_df.drop("RM",  inplace=True, axis=1)

#final_df.drop("Pave",  inplace=True, axis=1)

#final_df.drop("IR2",  inplace=True, axis=1)

#final_df.drop("IR3",  inplace=True, axis=1)

#final_df.drop("Reg",  inplace=True, axis=1)

#final_df.drop("HLS",  inplace=True, axis=1)

#final_df.drop("Low",  inplace=True, axis=1)

#final_df.drop("Lvl",  inplace=True, axis=1)

#final_df.shape

final_df = category_onehot_multcols(Features)

final_df = final_df.loc[:,~final_df.columns.duplicated()] #deletes the duplicates columns

final_df.shape

final_df

ydf_Train=final_df.iloc[:1422,:]
df_Test=final_df.iloc[1422:,:]

df_Test.head()

df_Train.shape

df_Test.shape

df_Test.drop(['SalePrice'],axis=1,inplace=True)

x_train=df_Train.drop(['SalePrice'],axis=1)
y_train=df_Train['SalePrice']

import xgboost
classifier=xgboost.XGBRegressor()
classifier.fit(x_train,y_train)

import xgboost
regressor=xgboost.XGBRegressor()

booster=['gbtree','gblinear']
base_score=[0.25,0.5,0.75,1]

## Hyper Parameter Optimization


n_estimators = [100, 500, 900, 1100, 1500]
max_depth = [2, 3, 5, 10, 15]
booster=['gbtree','gblinear']
learning_rate=[0.05,0.1,0.15,0.20]
min_child_weight=[1,2,3,4]

# Define the grid of hyperparameters to search
hyperparameter_grid = {
    'n_estimators': n_estimators,
    'max_depth':max_depth,
    'learning_rate':learning_rate,
    'min_child_weight':min_child_weight,
    'booster':booster,
    'base_score':base_score
    }

# Set up the random search with 4-fold cross validation
from sklearn.model_selection import RandomizedSearchCV
random_cv = RandomizedSearchCV(estimator=regressor,
            param_distributions=hyperparameter_grid,
            cv=5, n_iter=50,
            scoring = 'neg_mean_absolute_error',n_jobs = 4,
            verbose = 5,
            return_train_score = True,
            random_state=42)

random_cv.fit(x_train,y_train)

random_cv.best_estimator_

regressor=xgboost.XGBRegressor(base_score=0.25, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, gamma=0, learning_rate=0.1, max_delta_step=0,
       max_depth=2, min_child_weight=1, missing=None, n_estimators=900,
       n_jobs=1, nthread=None, objective='reg:linear', random_state=0,
       reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,
       silent=True, subsample=1)

regressor.fit(x_train,y_train)

import pickle
filename='finalized_model.pkl'
pickle.dump(classifier, open(filename,'wb'))

df_Test.shape

df_Test.head()

y_pred=regressor.predict(df_Test)

y_pred

pred=pd.DataFrame(y_pred)
sub_df=pd.read_csv('sample_submission.csv')
datasets=pd.concat([sub_df['Id'],pred],axis=1)
datasets.columns=['Id','SalePrice']
datasets.to_csv('final_submission.csv',index=False)

submission = pd.read_csv('final_submission.csv')

submission

